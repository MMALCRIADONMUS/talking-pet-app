# Task ID: 8
# Title: Usage Tracking & Paywall System
# Status: pending
# Dependencies: 7
# Priority: medium
# Description: Implement the usage tracking system that monitors conversation time and triggers the paywall after 30 seconds.
# Details:
1. Create a `PaywallModal.js` component:
   ```jsx
   import { useState } from 'react';
   import { loadStripe } from '@stripe/stripe-js';
   
   const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY);
   
   const PaywallModal = ({ isOpen, onClose, onPaymentSuccess }) => {
     const [loading, setLoading] = useState(false);
     
     const handleCheckout = async () => {
       setLoading(true);
       
       try {
         // In a real implementation, this would create a Stripe checkout session
         // For demo purposes, we'll simulate a successful payment
         await new Promise(resolve => setTimeout(resolve, 1500));
         onPaymentSuccess();
       } catch (error) {
         console.error('Payment error:', error);
       } finally {
         setLoading(false);
       }
     };
     
     if (!isOpen) return null;
     
     return (
       <div className="paywall-modal">
         <div className="modal-content">
           <h2>Continue Talking with Your Pet Friend!</h2>
           <p>You've used your free 30 seconds of pet conversation time.</p>
           <p>For unlimited conversations, upgrade to premium for just $2.99/month!</p>
           
           <button 
             className="checkout-button" 
             onClick={handleCheckout}
             disabled={loading}
           >
             {loading ? 'Processing...' : 'Upgrade Now'}
           </button>
           
           <button className="close-button" onClick={onClose}>
             Maybe Later
           </button>
         </div>
       </div>
     );
   };
   
   export default PaywallModal;
   ```
2. Enhance the main application component to track usage and trigger the paywall:
   ```jsx
   // Add to Home component state
   const [paywallTriggered, setPaywallTriggered] = useState(false);
   const [isPremium, setIsPremium] = useState(false);
   
   // Add useEffect to check playback time
   useEffect(() => {
     if (!isPremium && totalPlaybackTime >= 30 && !paywallTriggered) {
       setPaywallTriggered(true);
       
       // Pause current audio if playing
       if (audioRef.current) {
         audioRef.current.pause();
       }
     }
   }, [totalPlaybackTime, isPremium, paywallTriggered]);
   
   const handlePaymentSuccess = () => {
     setIsPremium(true);
     setPaywallTriggered(false);
     
     // Resume audio if it was playing
     if (audioRef.current) {
       audioRef.current.play();
     }
   };
   
   // Add PaywallModal to the JSX
   <PaywallModal 
     isOpen={paywallTriggered} 
     onClose={() => setPaywallTriggered(false)}
     onPaymentSuccess={handlePaymentSuccess}
   />
   ```
3. Implement session-based tracking to persist usage across page refreshes
4. Add visual indicator for remaining free time
5. Implement Stripe checkout integration for actual payments

# Test Strategy:
1. Test usage tracking accuracy with various conversation durations
2. Verify paywall triggers exactly at 30-second threshold
3. Test payment flow with Stripe test mode
4. Verify audio pauses when paywall appears and resumes after payment
5. Test session persistence across page refreshes
