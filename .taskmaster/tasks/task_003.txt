# Task ID: 3
# Title: AI Conversation Engine with OpenAI GPT-4o Integration
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create the API route for processing user input through OpenAI GPT-4o and generating child-friendly responses.
# Details:
1. Create `/pages/api/chat-to-audio.js` API route
2. Implement OpenAI GPT-4o integration:
   ```javascript
   import { OpenAI } from 'openai';
   
   export default async function handler(req, res) {
     if (req.method !== 'POST') {
       return res.status(405).json({ error: 'Method not allowed' });
     }
     
     const { text } = req.body;
     
     if (!text) {
       return res.status(400).json({ error: 'Text input is required' });
     }
     
     try {
       const openai = new OpenAI({
         apiKey: process.env.OPENAI_API_KEY,
       });
       
       const completion = await openai.chat.completions.create({
         model: 'gpt-4o',
         messages: [
           {
             role: 'system',
             content: 'You are a friendly, educational cartoon cat talking to a child aged 4-12. Keep responses positive, simple, age-appropriate, and under 3 sentences. Be playful, curious, and encouraging.'
           },
           { role: 'user', content: text }
         ],
         max_tokens: 150,
         temperature: 0.7,
       });
       
       const response = completion.choices[0].message.content;
       
       // Next step will be to convert this text to speech
       // For now, just return the text response
       return res.status(200).json({ text: response });
     } catch (error) {
       console.error('OpenAI API error:', error);
       return res.status(500).json({ error: 'Failed to generate response' });
     }
   }
   ```
3. Add system prompts to ensure child-friendly responses
4. Implement error handling and rate limiting
5. Add logging for monitoring API usage

# Test Strategy:
1. Test API endpoint with various child-appropriate questions
2. Verify response content is age-appropriate and friendly
3. Test error handling with invalid inputs
4. Measure response time and optimize if needed
5. Verify API key security and proper environment variable usage
